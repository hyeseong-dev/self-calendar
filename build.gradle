buildscript {        // 'buildscript' 블록은 빌드 스크립트 자체를 실행하는데 필요한 의존성을 정의합니다.

    repositories {
        mavenCentral() // 'repositories' 블록은 의존성을 다운로드 받을 저장소를 지정합니다. 여기서는 Maven Central 저장소를 사용합니다.
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.2"            // 'dependencies' 블록은 빌드 스크립트의 클래스패스에 추가할 의존성을 정의합니다. 여기서는 Spring Boot Gradle 플러그인을 추가합니다.
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"        // Spring의 의존성 관리 플러그인을 클래스패스에 추가합니다.

    }
}

subprojects {   // 'subprojects' 블록은 모든 하위 프로젝트에 적용될 설정을 정의합니다.

    apply plugin: 'java-library'                        // Java 라이브러리 플러그인을 적용합니다. 이는 자바 라이브러리를 빌드하기 위한 기본 작업을 제공합니다.
    apply plugin: 'org.springframework.boot'            // Spring Boot 플러그인을 적용합니다. 이는 Spring Boot 애플리z케이션 빌드에 필요한 작업을 제공합니다.
    apply plugin: 'io.spring.dependency-management'     // 의존성 관리 플러그인을 적용합니다. 이는 BOM(Bill of Materials)를 사용하여 의존성을 관리할 수 있게 합니다.

    group = 'com.fastcampus'         // 프로젝트의 그룹 ID를 설정합니다. 보통 역방향 도메인 이름을 사용합니다.
    version = '0.0.1-SNAPSHOT'       // 프로젝트의 버전을 설정합니다. 'SNAPSHOT'은 개발 중인 버전을 의미합니다.
    sourceCompatibility = '11'       // 소스 코드가 호환되어야 하는 Java 버전을 지정합니다. 여기서는 Java 11을 사용합니다.

    repositories {
        mavenCentral()      // 하위 프로젝트들의 의존성을 다운로드 받을 저장소로 Maven Central을 다시 지정합니다.
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'                          // 'compileOnly'는 컴파일 시에만 필요한 의존성을 지정합니다. Lombok 라이브러리를 추가합니다.
        annotationProcessor 'org.projectlombok:lombok'                  // 'annotationProcessor'는 애노테이션 프로세서에 필요한 의존성을 지정합니다. 여기서는 Lombok을 지정합니다.
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'  // 테스트 실행 시에만 필요한 JUnit Jupiter 엔진을 추가합니다.
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'  // 테스트 구현을 위해 JUnit Jupiter API를 추가합니다.
        testImplementation('org.springframework.boot:spring-boot-starter-test') {exclude group: 'junit', module: 'junit'}   // 스프링 부트 테스트 스타터를 추가하되, JUnit 4 의존성은 제외합니다.
    }

    test {
        useJUnitPlatform()  // JUnit 플랫폼을 사용하여 테스트를 실행하도록 설정합니다.
    }
}

project(':calendar-api') {  // ':calendar-api' 프로젝트의 설정을 정의합니다.

    dependencies {
        implementation project(':calendar-core')    // ':calendar-core' 프로젝트에 대한 의존성을 구현(implementation)으로 추가합니다.
    }
}

project(':calendar-batch') {    // ':calendar-batch' 프로젝트의 설정을 정의합니다.

    dependencies {
        implementation project(':calendar-core')    // ':calendar-core' 프로젝트에 대한 의존성을 구현(implementation)으로 추가합니다.
    }
}
